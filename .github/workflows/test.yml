name: Run Tests

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
      - '!v**'
  pull_request:
  workflow_call:

permissions:
  contents: read

env:
  FORCE_COLOR: 1

jobs:

  alpine:
    name: 'Linux: Alpine'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Alpine Linux in chroot
        uses: jirutka/setup-alpine@cf5fddcea495dcc19c0f991c6f6fa6a7abf3d50a # v1.3.0

      - name: Install Bash
        shell: alpine.sh --root {0}
        run: apk update && apk add bash

      - name: Run all tests
        shell: alpine.sh {0}
        run: bin/test
        env:
          DISABLE_KCOV: 1
          DISABLE_SHELLCHECK: 1

  # On Ubuntu, we run every test including coverage checking, then upload the
  # compiled script and coverage report in case they are needed
  ubuntu:
    name: 'Linux: Ubuntu'
    runs-on: ubuntu-24.04 # https://github.com/bin-cli/bin-cli/issues/43
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install dependencies
        run: bin/setup

      - name: Run all tests
        run: bin/test

      - name: Upload 'bin' artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bin
          path: dist/bin

      - name: Upload 'coverage/' artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage
          path: temp/coverage/merged/

  macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Upgrade Bash and Install ShellCheck
        run: brew update && brew install bash shellcheck

      - name: Run all tests (except coverage and ShellCheck)
        run: bin/test
        env:
          # While kcov can run on macOS, it's *really* slow (even with --include-path)
          DISABLE_KCOV: 1
          DISABLE_SHELLCHECK: 1

  cygwin:
    name: 'Windows: Cygwin'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Cygwin
        uses: egor-tensin/setup-cygwin@d2c752bab416d4b0662591bd366fc2686297c82d # v4.0.1

      - name: Run all tests (except coverage and ShellCheck)
        shell: C:\tools\cygwin\bin\bash.exe -e {0}
        run: bin/test
        env:
          DISABLE_KCOV: 1
          DISABLE_SHELLCHECK: 1
          LANG: en_US.UTF-8

  git-for-windows:
    name: 'Windows: Git for Windows'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run a basic smoke test
        shell: bash
        run: bin/build && dist/bin

      # GitHub Actions runners doesn't seem to have the necessary permissions for
      # MSYS='winsymlinks:nativestrict' to work, so these are disabled until I find
      # an alternative (or explicitly disable the tests that require symlinks)

      #- name: Run all tests (except coverage and ShellCheck)
      #  shell: bash
      #  run: bin/test
      #  env:
      #    DISABLE_KCOV: 1
      #    DISABLE_SHELLCHECK: 1
      #    LANG: en_US.UTF-8

  msys2:
    name: 'Windows: MSYS2'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run a basic smoke test
        shell: C:\msys64\usr\bin\bash.exe {0}
        run: bin/build && dist/bin

      #- name: Run all tests (except coverage and ShellCheck)
      #  shell: C:\msys64\usr\bin\bash.exe {0}
      #  run: bin/test
      #  env:
      #    DISABLE_KCOV: 1
      #    DISABLE_SHELLCHECK: 1
      #    LANG: en_US.UTF-8

  wsl:
    name: 'Windows: WSL'
    runs-on: windows-2025 # https://github.com/Vampire/setup-wsl/issues/72#issuecomment-2677169517
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install WSL distribution
        uses: Vampire/setup-wsl@3b46b44374d5d0ae94654c45d114a3ed7a0e07a8 # v5.0.1

      - name: Run all tests (except coverage)
        shell: wsl-bash {0}
        # wsl-bash doesn't seem to support 'env'
        # TEST_TEMP is required because the repo is in a Windows not Linux
        # directory, so the 'execute' bit is always set for files
        run: DISABLE_KCOV=1 DISABLE_SHELLCHECK=1 TEST_TEMP=/tmp/bin-cli-temp bin/test
