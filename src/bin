#!/usr/bin/env bash
################################################################################
# Bin CLI - A simple task runner       Copyright (c) 2023-25 Dave James Miller #
# https://github.com/bin-cli/bin-cli   MIT License                             #
################################################################################

#===== SHELL OPTIONS ===========================================================

set -euo pipefail
shopt -s nullglob

#===== VERSION =================================================================

readonly VERSION='1.2.3-source' # DO NOT CHANGE (see bin/build)

#===== HELPERS: DEBUGGING  =====================================================

# Use BIN_DEBUG=1 to output debugging information to stderr, or BIN_DEBUG_LOG to output it to a file
if [[ -n ${BIN_DEBUG-} && -z ${BIN_DEBUG_LOG-} ]]; then
    BIN_DEBUG_LOG='/dev/stderr' # kcov-ignore-line: Not tested
fi

debug() {
    if [[ -z ${BIN_DEBUG_LOG-} ]]; then
        return # kcov-ignore-line: Not tested
    fi

    local line
    line=$(debug_line)
    echo "$@" "[line $line]" >>"$BIN_DEBUG_LOG"
}

debug_line() {
    local lines
    lines=${BASH_LINENO[*]:1:${#BASH_LINENO[@]}-2}
    echo "${lines// /, }"
}

bug() {
    # kcov-ignore-start: This should never be needed!
    local line
    line=$(debug_line)
    fail "BUG: $1 on line $line"
    # kcov-ignore-end
}

#===== HELPERS: OUTPUT & ERROR HANDLING  =======================================

if [[ -t 1 ]]; then
    # Terminal connected - use ANSI codes
    # kcov-ignore-start: There is never a terminal connected during unit tests
    readonly RESET=$'\e[0m'
    readonly BOLD=$'\e[1m'
    readonly UNDERLINE=$'\e[4m'
    readonly GREY=$'\e[90m'
    readonly LBLUE=$'\e[94m'
    readonly LCYAN=$'\e[96m'
    readonly LWHITE=$'\e[97m'
    # kcov-ignore-end
else
    # No terminal connected - use plain output
    readonly RESET=''
    readonly BOLD=''
    readonly UNDERLINE=''
    readonly GREY=''
    readonly LBLUE=''
    readonly LCYAN=''
    readonly LWHITE=''
fi

readonly NEW_LINE=$'\n'

readonly ERR_NOT_EXECUTABLE=126
readonly ERR_NOT_FOUND=127
readonly ERR_GENERIC=246

declare exe=${0##*/}

fail() {
    local code message

    message=$1
    code=${2-$ERR_GENERIC}

    # If we are performing tab completion, we don't want to output anything as it would clobber the prompt
    # We'll also return a success code, though I don't know if that makes any practical difference
    if [[ ${action-} = 'complete-bash' ]]; then
        debug "$message"
        exit
    fi

    echo "$exe: $message" >&2
    exit "$code"
}

#===== PARSE ARGUMENTS =========================================================

declare action_argument=''
declare action=''
declare fixed_bin_dir=''
declare is_custom_exe=false

set_action() {
    # Ignore repeated arguments, e.g. '-e -e'
    if [[ "$2" = "$action" ]]; then
        return
    fi

    if [[ -n $action ]]; then
        fail "The '$action_argument' and '$1' arguments are incompatible"
    fi

    action_argument=$1 # global
    action=$2 # global
}

set_option_value() {
    local option variable value

    option=$1
    variable=$2
    value=$3

    if [[ -z $value ]]; then
        fail "The '$option' option requires a value"
    fi

    eval "$variable=\$value" # global
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --complete-bash)    set_action "$1" complete-bash ;;
        --completion)       set_action "$1" completion ;;
        --dir)              set_option_value '--dir' fixed_bin_dir "${2-}"; shift ;;
        --dir=*)            set_option_value '--dir' fixed_bin_dir "${1#*=}" ;;
        --exe)              is_custom_exe=true; set_option_value '--exe' exe "${2-}"; shift ;;
        --exe=*)            is_custom_exe=true; set_option_value '--exe' exe "${1#*=}" ;;
        --help | -h)        set_action "$1" help ;;
        --version | -v)     set_action "$1" version ;;
        --)                 shift; break ;;
        -*)                 fail "Invalid option '$1'" ;;
        *)                  break ;;
    esac

    shift
done

#===== SIMPLE ACTIONS: VERSION / HELP / COMPLETION SCRIPT ======================

if [[ $action = 'version' ]]; then
    echo "Bin CLI v$VERSION"
    exit
fi

if [[ $action = 'help' ]]; then
    echo "Usage: $exe [OPTIONS] [--] [COMMAND] [ARGUMENTS...]"
    echo
    echo "Options that can be used with a command:"
    echo "  --dir DIR             Specify the directory name to search for (absolute or relative path)"
    echo "  --exe NAME            Override the executable name displayed in the command list"
    echo
    echo "Options that do something special:"
    echo "  --completion          Output a tab completion script for the current shell"
    echo "  --help, -h            Display this help"
    echo "  --version, -v         Display the current version number"
    echo
    echo "Any options must be given before the command, because everything after the command will be passed as parameters to the script."
    echo
    echo "For more details see https://github.com/bin-cli/bin-cli/tree/v$VERSION#readme"
    exit
fi

# This doesn't do the tab completion - it just outputs the script to be 'eval'ed
# in the shell to enable tab completion.
if [[ $action = 'completion' ]]; then
    declare complete_command=("$(basename "$0")")
    if $is_custom_exe; then
        complete_command+=("--exe" "'$exe'")
    fi
    if [[ -n $fixed_bin_dir ]]; then
        complete_command+=("--dir" "'$fixed_bin_dir'")
    fi
    echo "complete -C \"${complete_command[*]} --complete-bash\" -o default $exe"
    exit
fi

#===== PREPARE FOR TAB COMPLETION (IF NEEDED) ==================================

declare -i num_parameters_to_ignore=0

if [[ $action = 'complete-bash' ]]; then

    # The command being completed is available in $COMP_LINE.
    # The current cursor position is available in $COMP_POINT.
    # Ignore everything after the cursor, and assign everything before it to $1,
    # $2, etc. as if it had been executed already.
    declare args=${COMP_LINE:0:$COMP_POINT}

    # shellcheck disable=SC2086 # We want this to be split into separate arguments
    # Note: This doesn't handle quotes properly - but I couldn't come up with anything better!
    # ('eval' works if quotes are balanced but errors if not, and is potentially unsafe)
    set -- $args

    # Remove the command name (since that would be in $0 not $1)
    shift

    # If there is a space at the end, we want to complete the next parameter; otherwise the last one given
    if [[ $args != *' ' ]]; then
        num_parameters_to_ignore=1
    fi

    # Parse options used on the command line
    can_have_more_options=true

    while [[ $# -gt $num_parameters_to_ignore ]]; do
        case $1 in
            --complete-bash)    fail "Cannot tab complete '$1'" ;;
            --completion)       fail "Cannot tab complete '$1'" ;;
            --dir)              set_option_value '--dir' fixed_bin_dir "${2-}"; shift ;;
            --dir=*)            set_option_value '--dir' fixed_bin_dir "${1#*=}" ;;
            --exe)              is_custom_exe=true; set_option_value '--exe' exe "${2-}"; shift ;;
            --exe=*)            is_custom_exe=true; set_option_value '--exe' exe "${1#*=}" ;;
            --help | -h)        fail "Cannot tab complete '$1'" ;;
            --version | -v)     fail "Cannot tab complete '$1'" ;;
            --)                 can_have_more_options=false; shift; break ;;
            -*)                 fail "Invalid option '$1'" ;;
            *)                  break ;;
        esac

        shift
    done

    # Tab-complete option names (but only if the '-' is typed)
    if $can_have_more_options && [[ ${1-} = -* ]]; then

        # kcov-ignore-start: Usage not detected
        declare option_names=(
            # '--complete-bash' # Shouldn't normally be entered by hand
            '--completion'
            '--dir'
            '--exe'
            '--help' '-h'
            '--version' '-v'
            '--'
        )
        # kcov-ignore-end

        declare option_name
        for option_name in "${option_names[@]}"; do
            if [[ $option_name = "$1"* ]]; then
                # 'echo' treats '-e' as an option rather than the string to output
                printf "%s\n" "$option_name"
            fi
        done

        exit
    fi

fi

#===== HELPERS: ARRAYS =========================================================

in_array() {
    local needle value

    needle=$1
    shift

    for value in "$@"; do
        if [[ "$value" = "$needle" ]]; then
            return 0
        fi
    done

    return 1
}

#===== LOCATE THE BIN/ DIRECTORY ===============================================

# The BIN_TEST_ROOT env var is ignored in production builds, but is used as
# an alternative to 'chroot' (which doesn't work on all OS's) in the tests
if [[ $VERSION = '1.2.3-dev' ]]; then
    readonly ROOT_DIR=${BIN_TEST_ROOT-}
else
    readonly ROOT_DIR='' # kcov-ignore-line: Not tested
fi

findup() (
    cd "$1"
    shift

    while true; do

        if test "$@"; then
            echo "$PWD"
            return 0
        fi

        if [[ ${PWD%/} = "$ROOT_DIR" ]]; then
            return 1
        fi

        cd ..

    done
)

# Determine paths
if [[ -n $fixed_bin_dir ]]; then

    # Look for given directory given by '--dir', which can either be an absolute
    # path, which is searched directly, or a directory name, which is found
    # by searching upwards from the current working directory as normal.

    if [[ $fixed_bin_dir = /* ]]; then
        # Absolute path
        if [[ ! -d $fixed_bin_dir ]]; then
            fail "Specified directory '$fixed_bin_dir/' is missing"
        fi

        bin_dir=$fixed_bin_dir
    else
        # Directory name
        if ! bin_dir_parent=$(findup "$PWD" -d "$fixed_bin_dir"); then
            fail "Could not find '$fixed_bin_dir/' directory starting from '$PWD'" $ERR_NOT_FOUND
        fi

        bin_dir="${bin_dir_parent%/}/$fixed_bin_dir"
    fi

else

    # Otherwise search for a bin/ directory
    if ! bin_dir_parent=$(findup "$PWD" -d bin); then
        fail "Could not find 'bin/' directory starting from '$PWD'" $ERR_NOT_FOUND
    fi

    bin_dir="${bin_dir_parent%/}/bin"

    # Ignore common global bin/ directories (/bin, /usr/bin, etc.)
    if in_array "$bin_dir" \
       "$ROOT_DIR/bin" \
       "$ROOT_DIR/usr/bin" \
       "$ROOT_DIR/usr/local/bin" \
       "$ROOT_DIR/snap/bin" \
       "$HOME/.local/bin" \
       "$HOME/bin"
    then
        fail "Could not find 'bin/' directory starting from '$PWD' (ignored '$bin_dir')" $ERR_NOT_FOUND
    fi
fi

#===== HELPERS: SEARCH FOR COMMANDS & ALIASES ==================================

declare -A aliases=()
declare -A matching_commands=()

find_matching_commands() {
    local alias command directory file target typed_command

    directory=$1
    typed_command=${2-}

    matching_commands=() # global

    # Don't allow hidden files to be executed
    if [[ $typed_command == .* ]]; then
        fail "Command names may not start with '.'"
    fi

    # If there is an exact match, return only that
    if [[ -n $typed_command && -e "$directory/$typed_command" ]]; then
        matching_commands["$typed_command"]="$directory/$typed_command" # global
        return
    fi

    # Otherwise return all prefix matches that are executable
    for file in "$directory/$typed_command"*; do
        if [[ ! -x $file ]]; then
            debug "$file is not executable"
            continue
        fi

        command=${file##*\/}

        # Detect aliases (but only for symlinks pointing to other commands in the same directory)
        if [[ -L $file ]]; then
            target=$(readlink "$file")
            if [[ $target == /* ]]; then
                fail "The symlink '$file' must use a relative path not absolute ('$target')"
            fi
            if [[ $target != */* ]]; then
                aliases[$target]="${aliases[$target]-}, $command"
                continue
            fi
        fi

        matching_commands["$command"]="$file" # global
    done

    # Aliases that don't point to a matching command must be treated as commands
    for target in "${!aliases[@]}"; do
        if [[ -z ${matching_commands[$target]-} ]]; then
            alias="${aliases[$target]:2}"
            # If multiple aliases point to the same command, we only need to return the first one
            alias=${alias%%, *}
            matching_commands[$alias]="$directory/$alias"
        fi
    done
}

#===== HELPERS: LIST COMMANDS ==================================================

list_commands() {
    local command_aliases directory parents title

    title=$1
    directory=$2
    parents=${3-}

    # Output the title
    echo "${LCYAN}${BOLD}${UNDERLINE}${title}${RESET}"

    # Output the list of commands
    local command

    if [[ ${#matching_commands[@]} -eq 0 ]]; then
        echo "${GREY}None found${RESET}"
        return
    fi

    for command in "${!matching_commands[@]}"; do
        printf "%s%s%s %q%s" "$LWHITE" "$exe" "$parents" "$command" "$RESET"

        if [[ -d "${matching_commands[$command]}" ]]; then
            echo -n " ${LBLUE}...${RESET}"
        fi

        command_aliases=${aliases[$command]-}
        if [[ -n $command_aliases ]]; then
            if [[ ${command_aliases:2} == *', '* ]]; then
                echo -n " ${GREY}(aliases: ${command_aliases:2})${RESET}"
            else
                echo -n " ${GREY}(alias: ${command_aliases:2})${RESET}"
            fi
        fi

        # New line
        echo
    done | sort
}

#===== PARSE PARAMETERS AND FIND/RUN THE COMMAND ===============================

declare current_directory=$bin_dir
declare full_command=''
declare matching_command=''

while [[ $# -gt $num_parameters_to_ignore ]]; do
    declare typed_command=$1
    shift

    find_matching_commands "$current_directory" "$typed_command"

    # Not found
    if [[ ${#matching_commands[@]} -eq 0 ]]; then
        full_command="$full_command $typed_command"

        help_text=''
        if in_array "${full_command:1}" completion help version; then
            help_text="${NEW_LINE}${GREY}Perhaps you meant to run 'bin --${full_command:1}'?${RESET}"
        fi
        fail "Command '${full_command:1}' not found in $bin_dir/$help_text" $ERR_NOT_FOUND
    fi

    # Exact or unique prefix match
    if [[ ${#matching_commands[@]} -eq 1 ]]; then
        for matching_command in "${!matching_commands[@]}"; do
            target="${matching_commands[$matching_command]}" # Only runs once
        done
        full_command=$(printf "%s %q" "$full_command" "$matching_command")

        # Directory - continue the loop looking for subcommands
        if [[ -d $target ]]; then
            current_directory=$target
            continue
        fi

        # If we're doing tab completion, we haven't reached the cursor yet
        if [[ $action = 'complete-bash' ]]; then
            fail "Cannot complete command arguments"
        fi

        # Non-executable file - give an error that's slightly more helpful than the Bash default
        if [[ ! -x "$target" ]]; then
            fail "'$target' is not executable (chmod +x)" $ERR_NOT_EXECUTABLE
        fi

        # Executable file - so execute it
        export BIN_COMMAND="${exe}${full_command}"
        export BIN_EXE="$exe"
        exec "$target" "$@"
    fi

    # Non-unique prefix match - display the results
    if [[ $action = 'complete-bash' ]]; then
        fail "Cannot complete due to non-unique parent command"
    fi

    list_commands "Matching Commands" "$current_directory" "$full_command"
    exit
done

#===== DISPLAY MATCHING COMMANDS ===============================================

# Tab completion - suggest everything matching the last argument - or every (sub)command if it's empty
if [[ $action = 'complete-bash' ]]; then
    find_matching_commands "$current_directory" "${1-}"

    for command in "${!matching_commands[@]}"; do
        echo "$command"
    done

    exit
fi

# Ran out of parameters - list all (sub)commands
find_matching_commands "$current_directory"
if [[ -n $full_command ]]; then
    list_commands "Available Subcommands" "$current_directory" "$full_command"
else
    list_commands "Available Commands" "$current_directory"
fi
